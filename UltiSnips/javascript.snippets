#
#  React snippets
#

snippet edc
export default connect()(
	${0:`!p snip.rv = snip.basename or "FunctionName"`}
)
endsnippet

snippet is
const initialState = '$0'
endsnippet

snippet edf
export default function ${1:`!p snip.rv = snip.basename or "FunctionName"`} (${2:state = initialState}) {
	$0
}
endsnippet

snippet rnccf
import React, { PropTypes } from 'react'
import { View, StyleSheet, Text } from 'react-native'

$1.propTypes = {

}

export default function ${1:`!p snip.rv = snip.basename or "FunctionName"`} (props) {
	return (
		<View>
			<Text>
			$1
			</Text>
		</View>
	)
}


const styles = StyleSheet.create({
	$0

})

endsnippet

snippet rnccs
import React, { PropTypes, Component } from 'react'
import { View, Text } from 'react-native'

export default class ${1:`!p snip.rv = snip.basename or "ClassName"`} extends Component {
	static propTypes = {}
	state = {}
	render () {
		return (
			${0:<View>
				<Text>
					$1
				</Text>
			</View>}
		)
	}
}
endsnippet

snippet duck
const initialState = {}

export default function ${1:`!p snip.rv = snip.basename or "FunctionName"`} (state = initialState, action) {
	switch (action.type) {
		default :
			return state
	}
}
endsnippet

snippet rc
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import {  } from 'components'

function mapStateToProps (state, props) {
	return {
	}
}
function mapDispatchToProps (dispatch, props) {
	return bindActionCreators( , dispatch)
}
export default connect(
	mapStateToProps,
	mapDispatchToProps
)()
endsnippet

snippet rccs
import React from 'react'

const ${1:`!p snip.rv = snip.basename or "ClassName"`} = React.createClass({
	render () {
		return (
			${0:<div>$1</div>}
		)
	},
})

export default $1
endsnippet

snippet rccf
import React, { PropTypes } from 'react'

export default function ${1:`!p snip.rv = snip.basename or "FunctionName"`} (props) {
	return (
		${0:<div>$1</div>}
	)
}
endsnippet

snippet container
import React from 'react'
import { ${2:`!p snip.rv = snip.basename[:-9] if snip.basename.endswith("Container") else snip.basename or "ClassName"`} } from 'components'

const ${1:`!p snip.rv = snip.basename or "ClassName"`} = React.createClass({
	render () {
		return (
			${0:<$2 />}
		)
	},
})

export default $1
endsnippet

snippet component
import React, { PropTypes } from 'react'

$1.propTypes = {
	//proptype: PropTypes.func.isRequired,
}

export default function ${1:`!p snip.rv = snip.basename or "FunctionName"`} (props) {
	return (
		${0:<div>$1</div>}
	)
}
endsnippet

snippet rcec
class ${1:`!p snip.rv = snip.basename or "ClassName"`} extends React.Component {
	render() {
		return (
			${0:<div>
				$1
			</div>}
		)
	}
}
endsnippet
